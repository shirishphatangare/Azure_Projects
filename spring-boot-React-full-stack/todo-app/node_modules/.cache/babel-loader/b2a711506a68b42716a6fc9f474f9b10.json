{"ast":null,"code":"import _classCallCheck from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\src\\\\App.js\";\n// To use JSX in a component, we need to include 'React' dependency from 'react' module\n// To extend from Component, we need to include 'Component' dependency from 'react' module\n// In 'react' module React Component is exported using 'export default' and Component is exported using 'export' keyword\n// Notice how 'React' is imported without curly braces whereas 'Component' is imported using curly braces.\nimport React, { Component } from 'react'; //import FirstComponent from './components/learning-examples/FirstComponent'\n//import SecondComponent from './components/learning-examples/SecondComponent'\n//import ThirdComponent from './components/learning-examples/ThirdComponent'\n//import Counter from './components/counter/Counter'\n\nimport TodoApp from './components/todo/TodoApp';\nimport './App.css';\nimport './bootstrap.css'; // Every Component must extend Component from 'react' module\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(TodoApp, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); // Class Component\n\n\nvar LearningComponents =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(LearningComponents, _Component2);\n\n  function LearningComponents() {\n    _classCallCheck(this, LearningComponents);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LearningComponents).apply(this, arguments));\n  }\n\n  _createClass(LearningComponents, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"LearningComponents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"My Hello World\", React.createElement(FirstComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(SecondComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(SecondFComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(ThirdComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LearningComponents;\n}(Component); // Function Component - It is used to create simple components\n\n\nfunction SecondFComponent() {\n  // Notice no render() method here \n  return React.createElement(\"div\", {\n    className: \"secondFComponent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Second Function Component\");\n}\n\nexport default App;\n/********************** Basic React Notes ****************\n\nInstall node.js and npm from https://nodejs.org/\n\nnode --version\nnpm --version\n\n-------------\n\n'create-react-app' is used to set up a modern web app by running one command.\n npx create-react-app my-app-name\n cd my-app-name\n npm start\n \n-------------\n \nTo create a production build use - npm run build \nVisual Studio code can be used for React development\npackage.json lists all the React app dependencies. It is like POM.xml for Maven.\nwhen we start server, 'index.html' is loaded in browser\nUse className and not class for react application.\n\n----------------------\n\nReact can be used to develop both Web applications and native applications --\n\nreact - Common Core react modules\nreact-scripts - Common React Scripts\nreact-dom - Web application\nreact-native - For Native (Iphone/Android) app development\n\n----------------------\n\nWhy to use Components in React?\n\n1) Modularity\n2) Reusability\n3) Independent module - Separation of functionality\n\n----------------------\n\nEach Component constitutes below parts -\n\n1) View - JSX or JS - render() method\n2) Logic - JS - Helper JS classes methods\n3) Styling - External css file or inline css\n4) State - Internal data store - Defined and initialized in a Constructor of a Component\n5) Props - Data passed to a Component as an attribute \n\n--------------------------------\n\nBabel - React comes bundled with Babel compiler. \nBabel is the compiler for next generation JavaScript.\nBabel compiles modern (next-gen) JSX code to browser ready JS code (lower JS versions).\n\n--------------------------------\n\nJSX Rules --\n\n1) Only one JSX expression can be returned from render() method. All tags must be included in a single <div> tag or a React Fragment <>.\n2) return statement returning a multi-line JSX expression must be included in parenthesis.\n3) Component name must start with a capital letter.\n4) To write JSX, 'React' from 'react' module must be imported in .jsx file.\n5) Best practice - Each component is defined in it's own .jsx file or module.\n6) Terminating Semicolons are not required in 99% cases in JS/JSX code.\n\n--------------------------------\n\n To install new module and transitive dependencies use --\n npm install <Module-Name>\n npm add <Module-Name>\n \n ---------------------------------------\n \n Chrome plugin - React Developer Tools\n Chrome plugin - Talend API Tester to test REST endpoints\n \n */","map":{"version":3,"sources":["c:\\git-repos\\Azure_Projects\\spring-boot-React-full-stack\\todo-app\\src\\App.js"],"names":["React","Component","TodoApp","App","LearningComponents","SecondFComponent"],"mappings":";;;;;;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAO,WAAP;AACA,OAAO,iBAAP,C,CAGA;;IACMC,G;;;;;;;;;;;;;6BACK;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAQD;;;;EAVeF,S,GAalB;;;IAEOG,kB;;;;;;;;;;;;;6BACK;AACP,aACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAGG,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHH,EAIG,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJH,EAKG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALH,CADF;AASD;;;;EAX8BH,S,GAelC;;;AAEA,SAASI,gBAAT,GAA4B;AACxB;AACH,SACM;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADN;AAKA;;AAED,eAAeF,GAAf;AAGA","sourcesContent":["\n// To use JSX in a component, we need to include 'React' dependency from 'react' module\n// To extend from Component, we need to include 'Component' dependency from 'react' module\n// In 'react' module React Component is exported using 'export default' and Component is exported using 'export' keyword\n// Notice how 'React' is imported without curly braces whereas 'Component' is imported using curly braces.\n\nimport React, { Component } from 'react';\n//import FirstComponent from './components/learning-examples/FirstComponent'\n//import SecondComponent from './components/learning-examples/SecondComponent'\n//import ThirdComponent from './components/learning-examples/ThirdComponent'\n//import Counter from './components/counter/Counter'\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\nimport './bootstrap.css';\n\n\n// Every Component must extend Component from 'react' module\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Anything inside curly braces is an expression */}\n        {/*<Counter />*/}\n        <TodoApp />\n        {/*<LearningComponents />*/}\n      </div>\n    );\n  }\n}\n\n// Class Component\n\n class LearningComponents extends Component {\n   render() {\n     return (\n       <div className=\"LearningComponents\">\n          My Hello World\n          <FirstComponent></FirstComponent>\n          <SecondComponent></SecondComponent>\n          <SecondFComponent></SecondFComponent>\n          <ThirdComponent></ThirdComponent>\n       </div>\n     );\n   }\n }\n\n\n// Function Component - It is used to create simple components\n\nfunction SecondFComponent() {\n    // Notice no render() method here \n\treturn (\n       <div className=\"secondFComponent\">\n       \t\tSecond Function Component\n       </div>\n     );\n}\n\nexport default App;\n\n\n/********************** Basic React Notes ****************\n\nInstall node.js and npm from https://nodejs.org/\n\nnode --version\nnpm --version\n\n-------------\n\n'create-react-app' is used to set up a modern web app by running one command.\n npx create-react-app my-app-name\n cd my-app-name\n npm start\n \n-------------\n \nTo create a production build use - npm run build \nVisual Studio code can be used for React development\npackage.json lists all the React app dependencies. It is like POM.xml for Maven.\nwhen we start server, 'index.html' is loaded in browser\nUse className and not class for react application.\n\n----------------------\n\nReact can be used to develop both Web applications and native applications --\n\nreact - Common Core react modules\nreact-scripts - Common React Scripts\nreact-dom - Web application\nreact-native - For Native (Iphone/Android) app development\n\n----------------------\n\nWhy to use Components in React?\n\n1) Modularity\n2) Reusability\n3) Independent module - Separation of functionality\n\n----------------------\n\nEach Component constitutes below parts -\n\n1) View - JSX or JS - render() method\n2) Logic - JS - Helper JS classes methods\n3) Styling - External css file or inline css\n4) State - Internal data store - Defined and initialized in a Constructor of a Component\n5) Props - Data passed to a Component as an attribute \n\n--------------------------------\n\nBabel - React comes bundled with Babel compiler. \nBabel is the compiler for next generation JavaScript.\nBabel compiles modern (next-gen) JSX code to browser ready JS code (lower JS versions).\n\n--------------------------------\n\nJSX Rules --\n\n1) Only one JSX expression can be returned from render() method. All tags must be included in a single <div> tag or a React Fragment <>.\n2) return statement returning a multi-line JSX expression must be included in parenthesis.\n3) Component name must start with a capital letter.\n4) To write JSX, 'React' from 'react' module must be imported in .jsx file.\n5) Best practice - Each component is defined in it's own .jsx file or module.\n6) Terminating Semicolons are not required in 99% cases in JS/JSX code.\n\n--------------------------------\n\n To install new module and transitive dependencies use --\n npm install <Module-Name>\n npm add <Module-Name>\n \n ---------------------------------------\n \n Chrome plugin - React Developer Tools\n Chrome plugin - Talend API Tester to test REST endpoints\n \n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}