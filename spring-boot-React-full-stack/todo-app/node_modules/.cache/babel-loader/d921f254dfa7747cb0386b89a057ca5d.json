{"ast":null,"code":"import _defineProperty from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\src\\\\components\\\\todo\\\\LoginComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\n\nvar LoginComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginComponent, _Component);\n\n  function LoginComponent(props) {\n    var _this;\n\n    _classCallCheck(this, LoginComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginComponent).call(this, props)); // Adding state to LoginComponent\n\n    _this.state = {\n      username: 'in28minutes',\n      password: '',\n      hasLoginFailed: false,\n      showSuccessMessage: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loginClicked = _this.loginClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Common Change event for multiple form elements\n\n\n  _createClass(LoginComponent, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      // console.log(this.state);\n      // Update state for entered username and password values in respective text tags \n      // Note that state variables 'username' and 'password' match with name attributes of text input tags\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"loginClicked\",\n    value: function loginClicked() {\n      var _this2 = this;\n\n      // 1) Hardcoded authentication - in28minutes,dummy\n      // if(this.state.username === 'in28minutes' && this.state.password === 'dummy'){\n      //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n      //     this.props.history.push(`/welcome/${this.state.username}`)\n      //     //this.setState({showSuccessMessage:true})\n      //     //this.setState({hasLoginFailed:false})\n      // }\n      // else {\n      //     this.setState({showSuccessMessage:false})\n      //     this.setState({hasLoginFailed:true})\n      // }\n      // --------------\n      // 2) Basic Authentication - No Expiration time, No User/Authorization details - Just base 64 encoded username and password\n      // AuthenticationService\n      // .executeBasicAuthenticationService(this.state.username, this.state.password)\n      // .then(() => {\n      //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n      //     this.props.history.push(`/welcome/${this.state.username}`)\n      // }).catch( () =>{\n      //     this.setState({showSuccessMessage:false})\n      //     this.setState({hasLoginFailed:true})\n      // })\n      // --------------\n      //3) JWT Authentication - Standard content and structure. You can also extend it to contain User/Authorization details\n      // JWT (JSON Web Token) are an open, industry standard RFC 7519 method for representing claims securely between two parties.\n      // JWT.IO allows you to decode, verify and generate JWT.\n      // JWT has - \n      // 1) HEADER (algorithm used for signature and type of token)\n      // 2) Payload (User/Authorization details)\n      // 3) Signature - HMACSHA512( base64UrlEncode(HEADER) + base64UrlEncode(Payload) + your-512-bit-secret )\n      // During login, get JWT token back. Use this JWT token for every subsequent request.  \n      // JWT has expiration time. Need to send refresh token request before expiration.\n      AuthenticationService.executeJwtAuthenticationService(this.state.username, this.state.password).then(function (response) {\n        AuthenticationService.registerSuccessfulLoginForJwt(_this2.state.username, response.data.token); // Push a new entry to the history stack and redirect to that path\n\n        _this2.props.history.push(\"/welcome/\".concat(_this2.state.username));\n      }).catch(function () {\n        _this2.setState({\n          showSuccessMessage: false\n        });\n\n        _this2.setState({\n          hasLoginFailed: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Login\"), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.hasLoginFailed && React.createElement(\"div\", {\n        className: \"alert alert-warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Invalid Credentials\"), this.state.showSuccessMessage && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Login Sucessful\"), \"User Name: \", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        value: this.state.username,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), \"Password: \", React.createElement(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: this.state.password,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.loginClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Login\")));\n    }\n  }]);\n\n  return LoginComponent;\n}(Component); //function ShowInvalidCredentials(props) {\n//\tif(props.hasLoginFailed){\n//\t\treturn <div> Invalid Credentials </div>\n//\t}\n//\treturn null\n//}\n//\n//\n//function ShowLoginSuccessMessage(props) {\n//\tif(props.showSuccessMessage){\n//\t\treturn <div> Login successful </div>\n//\t}\n//\treturn null\n//}\n\n\nexport default LoginComponent;","map":{"version":3,"sources":["c:\\git-repos\\Azure_Projects\\spring-boot-React-full-stack\\todo-app\\src\\components\\todo\\LoginComponent.jsx"],"names":["React","Component","AuthenticationService","LoginComponent","props","state","username","password","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","executeJwtAuthenticationService","then","response","registerSuccessfulLoginForJwt","data","token","history","push","catch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        // Adding state to LoginComponent\n        this.state = {\n            username: 'in28minutes',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    // Common Change event for multiple form elements\n    handleChange(event) {\n        // console.log(this.state);\n    \t// Update state for entered username and password values in respective text tags \n    \t// Note that state variables 'username' and 'password' match with name attributes of text input tags\n        this.setState(\n            {\n                /* Variable as a JSX key */\n            \t[event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n\n    loginClicked() {\n        \n    \t// 1) Hardcoded authentication - in28minutes,dummy\n    \t\n    \t// if(this.state.username === 'in28minutes' && this.state.password === 'dummy'){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        //     //this.setState({showSuccessMessage:true})\n        //     //this.setState({hasLoginFailed:false})\n        // }\n        // else {\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // }\n    \t\n    \t// --------------\n    \t\n    \t// 2) Basic Authentication - No Expiration time, No User/Authorization details - Just base 64 encoded username and password\n\n        // AuthenticationService\n        // .executeBasicAuthenticationService(this.state.username, this.state.password)\n        // .then(() => {\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        // }).catch( () =>{\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // })\n    \t\n    \t// --------------\n        \n    \t//3) JWT Authentication - Standard content and structure. You can also extend it to contain User/Authorization details\n    \t// JWT (JSON Web Token) are an open, industry standard RFC 7519 method for representing claims securely between two parties.\n    \t// JWT.IO allows you to decode, verify and generate JWT.\n    \t// JWT has - \n    \t// 1) HEADER (algorithm used for signature and type of token)\n    \t// 2) Payload (User/Authorization details)\n    \t// 3) Signature - HMACSHA512( base64UrlEncode(HEADER) + base64UrlEncode(Payload) + your-512-bit-secret )\n    \t// During login, get JWT token back. Use this JWT token for every subsequent request.  \n    \t// JWT has expiration time. Need to send refresh token request before expiration.\n    \t\n        AuthenticationService\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                // Push a new entry to the history stack and redirect to that path\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                \n                    { /* Below 2 statements are function components with props */ }\n                \t{/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/} \n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n    \n}\n\n\n//function ShowInvalidCredentials(props) {\n//\tif(props.hasLoginFailed){\n//\t\treturn <div> Invalid Credentials </div>\n//\t}\n//\treturn null\n//}\n//\n//\n//function ShowLoginSuccessMessage(props) {\n//\tif(props.showSuccessMessage){\n//\t\treturn <div> Login successful </div>\n//\t}\n//\treturn null\n//}\n\n\nexport default LoginComponent"]},"metadata":{},"sourceType":"module"}