{"ast":null,"code":"import _classCallCheck from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\git-repos\\\\Azure_Projects\\\\spring-boot-React-full-stack\\\\todo-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n/*\n \n Whenever an authentication REST call is made, 2 requests are sent for initial authentication request \n \n  1) Preflight Request to REST Endpoint - Request Method is OPTIONS\n  2) Actual REST call to same Endpoint - Request Method is GET\n  \n*/\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username, password) {\n      return axios.get(\"\".concat(API_URL, \"/basicauth\"), {\n        headers: {\n          authorization: this.createBasicAuthToken(username, password)\n        }\n      });\n    }\n  }, {\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(username, password) {\n      return axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n        username: username,\n        password: password\n      });\n    } // window.btoa for Base 64 encoding\n\n  }, {\n    key: \"createBasicAuthToken\",\n    value: function createBasicAuthToken(username, password) {\n      return 'Basic ' + window.btoa(username + \":\" + password);\n    } // The sessionStorage property allows you to access a session storage object for the current origin\n    // Using sessionStorage Object to store logged user name\n\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, password) {\n      //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n      //console.log('registerSuccessfulLogin')\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username); // Intercept every axios request and add Auth token to it\n\n      this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createJWTToken(token));\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return '';\n      return user;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(token) {\n      var _this = this;\n\n      // Intercept each axios request and add auth header to it\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = token;\n        }\n\n        return config;\n      } // Do something with request error - another argument to use() function\n      //,(error) => {}\n      ); // Similarly a axios response can also be intercepted\n      // axios.interceptors.response.use()\n    }\n  }]);\n\n  return AuthenticationService;\n}(); // For react components, we export the class directly. However, for helper services, we export an instance of the class - an object.\n\n\nexport default new AuthenticationService();\n/*Why we have not used localstorage?\n\nData stored in localStorage has no expiration time.\nData stored in sessionStorage gets cleared when the page session ends.\n\n*/","map":{"version":3,"sources":["c:\\git-repos\\Azure_Projects\\spring-boot-React-full-stack\\todo-app\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","user","getItem","interceptors","request","use","config","isUserLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;AAEP;;;;;;;;;IAUMC,qB;;;;;;;;;sDAEgCC,Q,EAAUC,Q,EAAU;AAClD,aAAOL,KAAK,CAACM,GAAN,WAAaL,OAAb,iBACH;AAAEM,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,OADG,CAAP;AAEH;;;oDAK+BD,Q,EAAUC,Q,EAAU;AAChD,aAAOL,KAAK,CAACU,IAAN,WAAcT,OAAd,oBAAsC;AACzCG,QAAAA,QAAQ,EAARA,QADyC;AAEzCC,QAAAA,QAAQ,EAARA;AAFyC,OAAtC,CAAP;AAIH,K,CAID;;;;yCACqBD,Q,EAAUC,Q,EAAU;AACrC,aAAO,WAAWM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,K,CAED;AACA;;;;4CACwBD,Q,EAAUC,Q,EAAU;AACxC;AACA;AACAQ,MAAAA,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,EAAyDE,QAAzD,EAHwC,CAKxC;;AACA,WAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;;kDAE6BD,Q,EAAUY,K,EAAO;AAC3CH,MAAAA,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,EAAyDE,QAAzD;AACA,WAAKW,sBAAL,CAA4B,KAAKE,cAAL,CAAoBD,KAApB,CAA5B;AACH;;;mCAEcA,K,EAAO;AAClB,aAAO,YAAYA,KAAnB;AACH;;;6BAGQ;AACLH,MAAAA,cAAc,CAACK,UAAf,CAA0BhB,gCAA1B;AACH;;;qCAEgB;AACb,UAAIiB,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBlB,gCAAvB,CAAX;AACA,UAAIiB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,aAAO,IAAP;AACH;;;0CAEqB;AAClB,UAAIA,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBlB,gCAAvB,CAAX;AACA,UAAIiB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,aAAOA,IAAP;AACH;;;2CAEsBH,K,EAAO;AAAA;;AAC7B;AACGhB,MAAAA,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAACC,MAAD,EAAY;AACR,YAAI,KAAI,CAACC,cAAL,EAAJ,EAA2B;AACvBD,UAAAA,MAAM,CAACjB,OAAP,CAAeC,aAAf,GAA+BQ,KAA/B;AACH;;AACD,eAAOQ,MAAP;AACH,OANL,CAOI;AACA;AARJ,QAF0B,CAa1B;AACA;AACH;;;;KAIL;;;AACA,eAAe,IAAIrB,qBAAJ,EAAf;AAGA","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n/*\n \n Whenever an authentication REST call is made, 2 requests are sent for initial authentication request \n \n  1) Preflight Request to REST Endpoint - Request Method is OPTIONS\n  2) Actual REST call to same Endpoint - Request Method is GET\n  \n*/\n\n\t\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    \n    \n    \n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    \n    \n    // window.btoa for Base 64 encoding\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    // The sessionStorage property allows you to access a session storage object for the current origin\n    // Using sessionStorage Object to store logged user name\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        \n        // Intercept every axios request and add Auth token to it\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n    \t// Intercept each axios request and add auth header to it\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n            // Do something with request error - another argument to use() function\n            //,(error) => {}\n        )\n        \n        // Similarly a axios response can also be intercepted\n        // axios.interceptors.response.use()\n    }\n}\n\n\n// For react components, we export the class directly. However, for helper services, we export an instance of the class - an object.\nexport default new AuthenticationService()\n\n\n/*Why we have not used localstorage?\n\nData stored in localStorage has no expiration time.\nData stored in sessionStorage gets cleared when the page session ends.\n\n*/"]},"metadata":{},"sourceType":"module"}